/*
 * AnVerGen - Android Version Generator
 * Copyright 2016 Yan QiDong
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.no_creativity:AnVerGen:1.0.0'
    }
}

import groovy.json.JsonBuilder
import org.no_creativity.anvergen.Git
import org.no_creativity.anvergen.Ver

group 'org.no_creativity'
version Ver.generateVersionName()

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'jacoco'

repositories {
    jcenter()
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.7'
    testCompile 'junit:junit:4.12'
}

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.6
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from groovydoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

def date = new Date()
def website = 'https://github.com/no-creativity/AnVerGen'
def packageDir = "${group.replace('.', '/')}/${project.name}"

task writePom << {
    pomDir = "$buildDir/${project.name}-${version}.pom"
    pom {
        project {
            inceptionYear date.format('yyyy')
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
            developers {
                developer {
                    id 'yanqd0'
                    name 'Yan QiDong'
                    email 'yanqd0@outlook.com'
                    url 'https://github.com/yanqd0'
                    timezone '+8'
                }
            }
            issueManagement {
                system 'github'
                url "$website/issues"
            }
        }
    }.writeTo(pomDir)
}

task writeDescriptor << {
    def tag = Git.getLatestTag()
    def versionDesc = {
        if (tag.equals(Git.getGitDescribe())) {
            return Git.getTagMessage(tag)
        } else {
            return Git.getCommitMessage()
        }
    }

    def builder = new JsonBuilder()
    def root = builder {
        'package' {
            name project.name
            repo 'maven'
            subject 'no-creativity'
            desc 'An automatic version generator for Android applications.'
            website_url website
            issue_tracker_url "$website/issues"
            vcs_url "${website}.git"
            github_use_tag_release_notes true
            github_release_notes_file 'RELEASE_NOTE.md'
            labels 'android', 'gradle', 'groovy'
            public_download_numbers true
        }
        'version' {
            name version
            desc versionDesc()
            released date.format('yyyy-MM-dd')
            vcs_tag tag
            gpgSign true
        }
        publish true
    }
    root.files = []
    root.files.add([
            'includePattern': 'build/libs/(.*\\.jar)',
            'uploadPattern' : "$packageDir/$version/\$1",
            'matrixParams'  : ['override': 1]
    ])
    root.files.add([
            'includePattern': 'build/(.*\\.pom)',
            'uploadPattern' : "$packageDir/$version/\$1",
            'matrixParams'  : ['override': 1]
    ])

    def jsonFile = new File("$buildDir/descriptor.json")
    jsonFile.write(builder.toPrettyString())
}

build.dependsOn writePom
build.dependsOn writeDescriptor
